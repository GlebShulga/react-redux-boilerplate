import React, { useState } from 'react'
import Head from './head'
// import wave from '../assets/images/wave.jpg'

const Home = () => {
  const [counter, setCounterNew] = useState(0)

  return (
    <div>
      <Head title="Hello" />
      <img alt="wave" src="images/wave.jpg" />
      <button type="button" onClick={() => setCounterNew(counter + 1)}>
        updateCounter
      </button>
      <div> Hello World Dashboard {counter} </div>
    </div>
  )
}

Home.propTypes = {}

export default Home

// Главный экран
// два поля

// количество строк - X - вводить не цифры нельзя
// количество столбцов - Y - вводить не цифры нельзя
// кнопка старта игры
// Пользователь нажимает на кнопку старта
// Генерируется квадратная таблица с X строк и Y столбцов. Каждая ячейка квадрат серого цвета.

// Начинается Игра

// Выбирается случайный квадрат по горизонтали и вертикали и загорается желтым цветом
// Если игрок успевает кликнуть за секунду - он становится зеленым и зажигается другой желтый
// Если игрок не успевает кликнуть за секунду - он становится красным и зажигается другой желтый
// Если количество красных или зеленых квадратов больше половины всех квадратов - игра заканчивается. Надо вывести количество раундов, кто победил.

// Усложнения
// Добавить уровень сложности легкий/сложный
// Если выбран сложный, то при попадании (квадрат зеленый) - время на попаадние следующего уменьшается на 5 процентов,
// а при промахе на 5 процентов время увеличивается. Например при старте игры - у пользователя есть время 1000мс, если он попал,
// то на нажатие следующего будет 950мс, если еще попал, то 950 - 950 *0.05 и тд, если промахнулся 950 + 950 *0.05

// Чтобы выбрать случайный элемент из массива - можно использовать

// items[Math.floor(Math.random() * items.length)]
// Если смотреть в лоб, то захочется сделать поле двумерным массивом, что приведет к страданиям и ощущения собственной беспомощности.
// Но, если чуть подумать и вспомнить о свойстве wrap, то можно задать динамически любую таблицу использую одномерный массив и стили.
// Тогда и работа с выбором случайного элемента будет проще значительнее.